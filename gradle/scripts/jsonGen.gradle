buildscript {
	repositories { mavenCentral() }
	dependencies { classpath "com.google.code.gson:gson:2.+" }
}

import com.google.gson.Gson

import java.util.regex.Matcher
import java.util.regex.Pattern

class JsonData {
	Map<String, Map<String, String>> templates = new HashMap<>();
	Map<String, Map<String, Map<String, String>>> extended = new HashMap<>();
	Map<String, Map<String, String>> simple = new HashMap<>();
}

class JsonProvider extends DefaultTask {
	@InputFiles
	@SkipWhenEmpty
	@Optional
	def FileCollection sources

	@OutputDirectory
	def File outputDir

	@TaskAction
	public void run() {
		sources.each { parse(it) };
	}

	public void parse(File file) {
		println "Processing file";
		Gson gson = new Gson()
		JsonData data = gson.fromJson(file.text, JsonData.class)

		File directory = file.parentFile
		Map<String, String> templates = data.templates.collectEntries { group, items ->
			items.collectEntries { folder, path ->
				new File(outputDir, folder).mkdirs()
				[path, new File(directory, path).text]
			}
		}

		data.simple.each { group, elements ->
			Map<String, Map<String, String>> store = data.extended[group];
			if (store == null) {
				store = new HashMap<String, Map<String, String>>()
				data.extended[group] = store
			}

			elements.each { name, texture ->
				store[name] = [texture: texture]
			}
		}

		data.extended.each { group, elements ->
			Map<String, String> results = data.templates[group]
			elements.each { name, properties ->
				properties.put("name", name)
				results.each { folder, path ->
					String contents = apply(templates[path], properties)
					new File(new File(outputDir, folder), name + ".json").text = contents
				}
			}
		}
	}

	static Pattern pattern = Pattern.compile(/\$\{(.*)\}/);

	public static String apply(String template, Map<String, String> replacements) {
		StringBuffer output = new StringBuffer()
		Matcher matcher = pattern.matcher(template)
		while (matcher.find()) {
			matcher.appendReplacement(output, replacements[matcher.group(1)])
		}
		matcher.appendTail(output)
		return output.toString()
	}
}

task jsonGenerator(type: JsonProvider) {
	sources = sourceSets.main.resources.filter { it.name == "generate.json" }
	outputDir = new File(project.buildDir, "resources/main/assets/cctweaks/models")
}

processResources.dependsOn += jsonGenerator

processResources {
	exclude("assets/cctweaks/models/templates")
	exclude("assets/cctweaks/models/generate.json")
}
